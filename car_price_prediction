# Step 1: Import Libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

# Step 2: Load Dataset
# Replace 'car_data.csv' with your dataset file.
data = pd.read_csv('car_data.csv')

# Step 3: Inspect Data
print(data.head())

# Step 4: Preprocess Data
# Define features and target variable
X = data.drop(columns=['price'])  # Drop 'price' (target)
y = data['price']                 # Target variable

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define preprocessing for numerical and categorical features
numeric_features = X.select_dtypes(include=['int64', 'float64']).columns
categorical_features = X.select_dtypes(include=['object']).columns

# Create preprocessors
preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numeric_features),   # Scale numeric data
        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)  # Encode categorical data
    ]
)

# Step 5: Create ML Pipeline
pipeline = Pipeline([
    ('preprocessor', preprocessor),
    ('model', RandomForestRegressor(n_estimators=100, random_state=42))
])

# Step 6: Train the Model
pipeline.fit(X_train, y_train)

# Step 7: Evaluate the Model
y_pred = pipeline.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R-squared Score: {r2}")

# Step 8: Save the Model
import joblib
joblib.dump(pipeline, 'car_price_predictor.pkl')

# Step 9: Predict on New Data
def predict_price(input_data):
    # Input data must be in the same format as the training data
    input_df = pd.DataFrame([input_data])
    return pipeline.predict(input_df)[0]

new_car = {
    'make': 'Toyota',
    'model': 'Corolla',
    'year': 2020,
    'mileage': 15000,
    'fuel_type': 'Petrol'
}

predicted_price = predict_price(new_car)
print(f"Predicted Price: ${predicted_price}")
